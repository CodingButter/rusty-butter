/**
 * Interactive Demo of the AI Agent Framework
 * Shows all tools in action!
 */

const { Agent } = require('./src/agent');

async function runDemo() {
  console.log('🎮 AI Agent Framework - Interactive Demo\n');
  console.log('=' .repeat(50));
  console.log('Available tools: calculator, web-search, file-writer, code-executor');
  console.log('=' .repeat(50));
  console.log('\n');

  // Create a fully-equipped agent
  const demoAgent = new Agent({
    name: 'DemoBot',
    model: 'gpt-4',
    tools: ['calculator', 'web-search', 'file-writer', 'code-executor']
  });

  // Demo 1: Calculator
  console.log('📐 Demo 1: Advanced Math');
  const calc = demoAgent.tools.get('calculator');
  const mathResult = await calc.execute({
    expression: '(10^2 + sqrt(625)) * cos(0)'
  });
  console.log('Result:', mathResult.formatted);
  console.log('\n---\n');

  // Demo 2: Code Execution
  console.log('💻 Demo 2: Code Execution');
  const executor = demoAgent.tools.get('code-executor');
  const codeResult = await executor.execute({
    code: `
      const fibonacci = (n) => {
        if (n <= 1) return n;
        return fibonacci(n - 1) + fibonacci(n - 2);
      };
      
      const results = [];
      for (let i = 0; i < 10; i++) {
        results.push(fibonacci(i));
      }
      console.log('Fibonacci sequence:', results);
      results;
    `
  });
  console.log('Execution result:', codeResult.result);
  console.log('\n---\n');

  // Demo 3: Web Search + File Writing
  console.log('🔍 Demo 3: Research & Document');
  const search = demoAgent.tools.get('web-search');
  const searchRes = await search.execute({
    query: 'best practices for AI agent design'
  });
  
  // Write search results to file
  const writer = demoAgent.tools.get('file-writer');
  const report = `AI Agent Design Best Practices
Generated: ${new Date().toISOString()}

Search Results for: "${searchRes.query}"

${searchRes.results.map((r, i) => 
  `${i + 1}. ${r.title}\n   ${r.snippet}\n   URL: ${r.url}`
).join('\n\n')}

---
Report generated by ${demoAgent.name} using AI Agent Framework`;

  const writeRes = await writer.execute({
    filePath: './output/research-report.md',
    content: report
  });
  console.log('Research saved:', writeRes.message);
  console.log('\n---\n');

  // Demo 4: Combined workflow
  console.log('🔗 Demo 4: Multi-Tool Workflow');
  console.log('Task: Calculate compound interest and generate a report\n');
  
  // Step 1: Calculate
  const principal = 1000;
  const rate = 0.05;
  const years = 10;
  
  const compoundInterest = await calc.execute({
    expression: `${principal} * (1 + ${rate})^${years}`
  });
  
  // Step 2: Generate visualization code
  const vizCode = await executor.execute({
    code: `
      const data = [];
      for (let year = 0; year <= ${years}; year++) {
        const amount = ${principal} * Math.pow(1 + ${rate}, year);
        data.push({ year, amount: Math.round(amount * 100) / 100 });
      }
      data;
    `
  });
  
  // Step 3: Create report
  const finalReport = `Investment Growth Report
=======================

Initial Investment: $${principal}
Annual Rate: ${rate * 100}%
Period: ${years} years
Final Amount: $${Math.round(compoundInterest.result * 100) / 100}

Year-by-Year Growth:
${vizCode.result.map(d => `Year ${d.year}: $${d.amount}`).join('\n')}

Generated by AI Agent Framework`;

  await writer.execute({
    filePath: './output/investment-report.txt',
    content: finalReport
  });
  
  console.log('✅ Workflow completed!');
  console.log(`   - Calculated compound interest: $${Math.round(compoundInterest.result * 100) / 100}`);
  console.log(`   - Generated ${vizCode.result.length} data points`);
  console.log('   - Saved comprehensive report');
  
  console.log('\n🎉 Demo completed successfully!');
}

// Run the demo
runDemo().catch(console.error);